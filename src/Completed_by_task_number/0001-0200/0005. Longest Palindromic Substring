class Solution {
    public String longestPalindrome(String s) {
        char[] str = s.toCharArray();
        if (str.length == 1 || str.length == 2 && str[0] == str[1]) return s;
        String currSub = s.substring(0, (str[0] == str[1]) ? 2 : 1);
        for (int i = 1; i < str.length - 1; i++) {
            //find palindromic substring
            currSub = checkSubstring(currSub, str, i, i + 1);
            currSub = checkSubstring(currSub, str, i - 1, i + 1);
        }
        return currSub;
    }

    private String checkSubstring(String currSub, char[] str, int a, int b) {
        if (str[a] == str[b]) {
            String pal = getPalindrome(str, a, b);
            //comapre current and current longest palindromic substring
            return (currSub.length() < pal.length()) ? pal : currSub;
            }
        return currSub;
    }

    private String getPalindrome(char[] ca, int st, int fn) {
        //increase substring while it palindromic
        while (st >= 0 && fn < ca.length && ca[st] == ca[fn]) {
            st--; fn++;
        }
        return new String(ca, st + 1, fn - st - 1);
    }
}