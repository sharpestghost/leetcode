//Tags: ArrayList[] edges(Graph)
class Solution {
    public int maxStarSum(int[] vals, int[][] edges, int k) {
        if (k == 0 || edges.length == 0) return max(vals);
        int n = vals.length;
        List<Integer>[] edgesMap = new ArrayList[n];
        int[] sums = new int[n];
        Arrays.setAll(edgesMap, i -> new ArrayList<Integer>());
        for (int[] edge: edges) {
            int a = edge[0], b = edge[1];
            if (vals[a] > 0) edgesMap[b].add(vals[a]);
            if (vals[b] > 0) edgesMap[a].add(vals[b]);
        }
        for (int i = 0; i < sums.length; i++) {
            edgesMap[i].sort(Collections.reverseOrder());
            for (int j = 0; j < edgesMap[i].size() && j < k; j++) {
                sums[i] += edgesMap[i].get(j);
            }
            sums[i] += vals[i];
        }
        return max(sums);
    }

    private int max(int[] vals) {
        int max = vals[0];
        for (int i = 1; i < vals.length; i++) {
            if (vals[i] > max) max = vals[i];
            }
        return max;
    }
}