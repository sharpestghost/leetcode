//Have a solution, but this is bad one
class Solution {
    public int countPalindromes(String s) {
        if (s.length() < 5) return 0;
        long res = 0;
        int len = s.length();
        int MOD = 1000000007;
        if (s.charAt(0) == s.charAt(1)) {
            boolean perm = true;
            for (char c: s.toCharArray()) {
                if (c != s.charAt(0)) {
                    perm = false;
                    break;
                }
            }
            if (perm) {
                int cnt = 1;
                res = 1;
                for (int i = 1; i < 6; i++) {
                    res *= len--;
                    res /= i;
                }
                return (int) (res % MOD);
            }
        }
        int[][] dp = new int[len][len];

        for(int i = len - 2; i >= 0; --i) {
            for(int j = i + 2; j < len; ++j) {
                dp[i][j] = dp[i][j - 1] % MOD + ((dp[i + 1][j] == dp[i + 1][j - 1] ? 0 : dp[i + 1][j] % MOD - dp[i + 1][j - 1] % MOD));
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] += j - i - 1;
                }
            }
        }

        for(int i = 0; i < len; ++i){
            for(int j = i + 4; j < len; ++j) {
                if(s.charAt(i) == s.charAt(j)) {
                    res += (dp[i + 1][j - 1] % MOD);
                }
            }
        }
        return (int) (res % MOD);
    }
}